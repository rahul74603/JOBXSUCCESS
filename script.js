document.addEventListener("DOMContentLoaded", async function () {
    // ‚úÖ Government Jobs Load ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ Code
    const jobsList = document.getElementById("jobsList");
    
    try {
        // üîπ firebase-config.js ‡§∏‡•á Firebase config import ‡§ï‡§∞‡§®‡§æ
        const configModule = await import("./firebase-config.js");
        const firebaseConfig = configModule.default;

        // üîπ Firebase Initialize (‡§Ö‡§ó‡§∞ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü ‡§π‡•ã)
        if (!firebase.apps.length) {
            firebase.initializeApp(firebaseConfig);
        }

        const db = firebase.database().ref("jobs"); // ‚úÖ 'jobs' ‡§∏‡§π‡•Ä Database Path

        // üîπ Firebase ‡§∏‡•á Jobs ‡§§‡•á‡§ú‡•Ä ‡§∏‡•á ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
        db.on("value", (snapshot) => {
            jobsList.innerHTML = ""; // üîπ ‡§™‡§π‡§≤‡•á ‡§ï‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§π‡§ü‡§æ‡§®‡§æ
            const jobs = snapshot.val();

            if (jobs) {
                Object.keys(jobs).forEach((key) => {
                    const job = jobs[key];

                    // üîπ Deadline ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡§æ (‡§Ö‡§ó‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§§‡•ã ‡§õ‡§ø‡§™‡§æ ‡§¶‡•ã)
                    const deadlineText = job.lastDate ? `üìÖ Last Date: ${job.lastDate}` : "";

                    // üîπ HTML Structure
                    const jobElement = document.createElement("li");
                    jobElement.innerHTML = `
                        <div class="job-card">
                            <strong>${job.title}</strong> - <i>${job.company}</i>
                            <br> üìç Location: ${job.location}
                            <br> ${deadlineText}
                            <br> <a class="apply-btn" href="${job.applyLink}" target="_blank">üöÄ Apply Now</a>
                        </div>
                    `;
                    jobsList.appendChild(jobElement);
                });
            } else {
                jobsList.innerHTML = "<li>‡§ï‡•ã‡§à ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§®‡•å‡§ï‡§∞‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç</li>";
            }
        });
    } catch (error) {
        console.error("‚ùå Error loading Firebase config:", error);
    }

    // ‚úÖ Study Materials Load ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ Code (GitHub ‡§∏‡•á)
    const studyList = document.getElementById("studyList");
    
    async function fetchGitHubFolders() {
        const githubRepo = "https://api.github.com/repos/‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ-‡§ó‡§ø‡§ü‡§π‡§¨-‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ/‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ-‡§∞‡§ø‡§™‡•â-‡§®‡•á‡§Æ/contents/study%20materials";
        
        try {
            const response = await fetch(githubRepo);
            const folders = await response.json();

            studyList.innerHTML = ""; // üîπ ‡§™‡§π‡§≤‡•á ‡§ï‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§π‡§ü‡§æ‡§®‡§æ

            if (Array.isArray(folders)) {
                folders.forEach(folder => {
                    if (folder.type === "dir") {
                        const folderElement = document.createElement("li");
                        folderElement.innerHTML = `
                            <a href="#" onclick="loadCategory('${folder.name}')">${folder.name}</a>
                        `;
                        studyList.appendChild(folderElement);
                    }
                });
            } else {
                studyList.innerHTML = "<li>‡§ï‡•ã‡§à ‡§∏‡•ç‡§ü‡§°‡•Ä ‡§Æ‡§ü‡•á‡§∞‡§ø‡§Ø‡§≤ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç</li>";
            }
        } catch (error) {
            console.error("‚ùå Error fetching GitHub folders:", error);
        }
    }

    fetchGitHubFolders(); // üîπ GitHub ‡§∏‡•á Study Materials ‡§≤‡•ã‡§° ‡§ï‡§∞‡•ã

    // ‚úÖ ‡§ú‡§¨ ‡§ï‡•ã‡§à ‡§ï‡•à‡§ü‡•á‡§ó‡§∞‡•Ä ‡§ñ‡•Å‡§≤‡•á, ‡§§‡•ã ‡§Ö‡§Ç‡§¶‡§∞ ‡§ï‡•á ‡§∏‡§¨-‡§´‡•ã‡§≤‡•ç‡§°‡§∞‡•ç‡§∏ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
    window.loadCategory = async function (category) {
        const categoryRepo = `https://api.github.com/repos/‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ-‡§ó‡§ø‡§ü‡§π‡§¨-‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ/‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ-‡§∞‡§ø‡§™‡•â-‡§®‡•á‡§Æ/contents/study%20materials/${category}`;

        try {
            const response = await fetch(categoryRepo);
            const subFolders = await response.json();

            studyList.innerHTML = `<h3>${category}</h3>`; // üîπ Header ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç

            if (Array.isArray(subFolders)) {
                subFolders.forEach(subFolder => {
                    if (subFolder.type === "dir") {
                        const subFolderElement = document.createElement("li");
                        subFolderElement.innerHTML = `
                            <a href="#" onclick="loadFiles('${category}', '${subFolder.name}')">${subFolder.name}</a>
                        `;
                        studyList.appendChild(subFolderElement);
                    }
                });
            } else {
                studyList.innerHTML += "<li>‡§á‡§∏ ‡§ï‡•à‡§ü‡•á‡§ó‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ</li>";
            }
        } catch (error) {
            console.error("‚ùå Error fetching category:", error);
        }
    };

    // ‚úÖ ‡§ú‡§¨ ‡§ï‡•ã‡§à ‡§´‡§º‡•ã‡§≤‡•ç‡§°‡§∞ ‡§ñ‡•Å‡§≤‡•á, ‡§§‡•ã ‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
    window.loadFiles = async function (category, subCategory) {
        const filesRepo = `https://api.github.com/repos/‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ-‡§ó‡§ø‡§ü‡§π‡§¨-‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ/‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ-‡§∞‡§ø‡§™‡•â-‡§®‡•á‡§Æ/contents/study%20materials/${category}/${subCategory}`;

        try {
            const response = await fetch(filesRepo);
            const files = await response.json();

            studyList.innerHTML = `<h3>${subCategory} (üìÇ ${category})</h3>`; // üîπ Header ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç

            if (Array.isArray(files)) {
                files.forEach(file => {
                    if (file.type === "file") {
                        const fileElement = document.createElement("li");
                        fileElement.innerHTML = `
                            <a href="${file.download_url}" target="_blank">üìÑ ${file.name}</a>
                        `;
                        studyList.appendChild(fileElement);
                    }
                });
            } else {
                studyList.innerHTML += "<li>‡§á‡§∏ ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ</li>";
            }
        } catch (error) {
            console.error("‚ùå Error fetching files:", error);
        }
    };
});
