const CACHE_NAME = 'jobxsuccess-v2'; // ЁЯФ╣ рд╡рд░реНрдЬрд╝рди рдЕрдкрдбреЗрдЯ рдХрд┐рдпрд╛

const urlsToCache = [
  '/',  
  '/index.html',  
  '/jobs.html',    // ЁЯФ╣ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛
  '/study.html',   // ЁЯФ╣ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛
  '/style.css',  
  '/manifest.json', // ЁЯФ╣ manifest.json рдЬреЛрдбрд╝рд╛
  '/icons/icon-192x192.png',  
  '/icons/icon-512x512.png',  
  '/offline.html'  // ЁЯФ╣ рдирдпрд╛ рдСрдлрд╝рд▓рд╛рдЗрди рдкреЗрдЬ
];

self.addEventListener('install', (event) => {
  console.log('Service Worker installing...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Opened cache');
        return cache.addAll(urlsToCache);
      })
  );
});

self.addEventListener('activate', (event) => {
  console.log('Service Worker activating...');
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (!cacheWhitelist.includes(cacheName)) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

self.addEventListener('fetch', (event) => {
  // ЁЯФ╣ рдиреЗрдЯрд╡рд░реНрдХ-рдлрд░реНрд╕реНрдЯ рд╕реНрдЯреНрд░реИрдЯреЗрдЬреА (рдбрд╛рдпрдирд╛рдорд┐рдХ рдХреЙрдиреНрдЯреЗрдВрдЯ рдХреЗ рд▓рд┐рдП)
  event.respondWith(
    fetch(event.request)
      .then((response) => {
        // рдирдП рдбреЗрдЯрд╛ рдХреЛ рдХреИрд╢ рдХрд░реЗрдВ
        const responseToCache = response.clone();
        caches.open(CACHE_NAME)
          .then((cache) => {
            cache.put(event.request, responseToCache);
          });
        return response;
      })
      .catch(() => {
        // рдХреИрд╢ рд╕реЗ рдбреЗрдЯрд╛ рджрд┐рдЦрд╛рдПрдВ рдЕрдЧрд░ рдиреЗрдЯрд╡рд░реНрдХ рдирд╣реАрдВ рд╣реИ
        return caches.match(event.request)
          .then((response) => {
            if (response) return response;
            // рдЕрдЧрд░ рдХреБрдЫ рднреА рдирд╣реАрдВ рдорд┐рд▓рд╛ рддреЛ рдСрдлрд╝рд▓рд╛рдЗрди рдкреЗрдЬ рджрд┐рдЦрд╛рдПрдВ
            return caches.match('/offline.html');
          });
      })
  );
});
